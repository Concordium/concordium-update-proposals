                           Protocol update

Protocol Version: 6
Builds on Protocol Version: 5

                               Abstract

This document describes the changes in Concordium protocol version 6
compared to protocol version 5.

The protocol change has the following main effects
- it changes the consensus protocol from an existing two-layer design
  to a new Concordium BFT consensus
- fixes the behaviour of state rollbacks in specific scenarios with
  version 1 contracts.
- extends the list of supported Wasm instructions for version 1
  contracts, and fixes an incompatibility with the Wasm standard
- adds better support for sponsored transactions

                              Background

Protocol version 6 changes protocol version 5 in two main areas.
The first area is a relatively modest extension of smart contract
functionality, with the main effect being better support for
sponsored transactions.
The major update in protocol 6 however, is the new consensus protocol,
Concordium BFT.

Up to and including protocol 5, Concordium used a two-layer consensus
design, with a proof of stake Nakamoto style consensus at the base
layer with finalization on top which marked certain blocks as finalized.
The idea being that the base Nakamoto layer works as long as more than
1/2 of stake adheres to the protocol over long periods of time, but
the finalization layer ensures speedy, explicit, finalization, in good
conditions when there is more than 2/3 liveness and adherence to protocol.

While this two-layer design did serve Concordium well during the initial
phase, and is in theory robust, the two layer design is rather complex,
and makes it challenging to optimize the consensus for both throughput and
confirmation latency while maintaining security.

In protocol 6 a new consensus protocol Concordium Byzantine Fault Tolerance
(BFT) will be used instead. The protocol offers high transaction throughput
and lower confirmation time because a block can be produced as soon as the
previous block has been signed. The overall architecture remains the same.
There are still bakers and a subset of them, the finalizers. In contrast to
how time was split into slots in existing consensus, Concordium BFT no
longer has a notion of slots. Instead it advances by rounds. In each round,
a predetermined leader among the bakers should produce a block. The members
of the finalization committee then sign this block, and their collective
signatures are aggregated to form a quorum certificate (QC). This quorum
certificate is then included in the next block. If the leader fails to
produce a block in the round, or not enough signatures were gathered for a
QC, then the finalizers will instead send timeout messages, which are
aggregated to form a timeout certificate. Each block always contains a
quorum certificate and may contain a timeout certificate for the previous
round if and only if the previous round timed out. When blocks on a common
chain in two consecutive rounds have quorum certificates, the block in the
first of these rounds (together with its ancestors) is considered
finalized. At this point, the protocol ensures that it cannot be rolled
back. The two consecutive blocks must also be within the same epoch.

Leaders are determined per epoch, and are known to everybody for the epoch.
The notion of a payday, as it exists in protocols 4 and 5, remains largely
unchanged, although payday transitions are slightly changed due to the
technicalities of how epoch transitions occur in Concordium BFT.
However in normal conditions there should be little observable effect on
users of the chain.

                               Changes

The following behaviours are changed in protocol version 6.

1. Concordium BFT takes effect. In particular this changes the format of
   blocks, and the messages exchanged by the nodes.
2. The election difficulty chain parameter is removed.
3. There are new chain parameters
   - the minimum timeout, and factors for increasing and decreasing round
     timeout duration on successive round timeouts and finalizations,
     respectively
   - minimum block time, controlling minimum time between blocks in two
     successive rounds
   - minimum number of finalizers and maximum number of finalizers. These,
     together with the existing finalizer relative stake threshold
     parameter, revise the condition on being a finalizer. The relative
     stake threshold is not interpreted relative to the total effective
     stake of bakers. The minimum number of finalizers must be reached
     before the relative stake threshold applies. Analogously, the number
     of finalizers are capped.
4. Block energy limit becomes an updatable parameter.
5. Smart contract validation has the following changes
   - Version 1 smart contracts can now use sign extension Wasm
     instructions (i32.extend8_s, i32.extend16_s, i64.extend8_s,
     i64.extend16_s, i64.extend32_s).
   - In version 1 smart contracts, the contract schema, and other custom
     sections, no longer count towards the cost when executing contracts
     for modules that were deployed in protocol 6.
   - The behaviour of rollbacks in certain cases of reentrant contract
     calls is corrected to conform to the intended semantics. In protocols
     4 and 5 state changes might not be rolled back in case of failure of
     nested, reentrant, contract calls.
6. In V1 smart contracts, the `invoke` operation allows for two additional
   operations, querying account keys, and checking a signature with respect
   to the account keys.

                               Effects

1. The consensus change has no direct effects on the state of accounts and
   contracts. The overall immediate effect of the new consensus will be, in
   normal network conditions, that transaction confirmation times will have
   much less variance.

2. Behaviour of existing V1 contract instances may be affected in the
   following scenarios
   - the contract attempted to perform an operation with tags 5 or 6 the
     execution would have triggered a runtime error, whereas in protocol 6
     the response can either be a runtime error, or a response code
     indicating the result of the operation, depending on the parameters
     supplied to the operation.
   - if the contract interaction triggered the incorrect rollback behaviour
     then the semantics of those contract executions will change.
   - the cost of some smart contract executions may change slightly as a
     result of fixes to address the incorrect behaviour of rollbacks.

                     Protocol update instruction

The protocol update instruction is identified by the SHA256 hash of
this file. The instruction needs the following auxiliary data

- minimum round timeout in milliseconds
- timeout increase factor
- timeout decrease factor
- minimum time between blocks in milliseconds
â€“ block energy limit
- finalization relative stake threshold, minimum and maximum number of finalizers
